#!/usr/bin/env python3


import os
import sys
import fire
import enum
import jinja2
import colorama


class Miao:
    """
    Project manager for generating CMake file
    """

    basic_template = """

cmake_minimum_required(VERSION 3.0)
project({{ project_name }})

""".strip()

    class _ConsoleOutputType(enum.Enum):
        LOG = enum.auto()
        WARNING = enum.auto()
        ERROR = enum.auto()

    def __init__(self, use_color: bool = True):
        self.use_color: bool = use_color

    def _print(
        self,
        text: str = "",
        prefix: str = "",
        output_type: _ConsoleOutputType = _ConsoleOutputType.LOG
    ):
        if self.use_color:
            if output_type is Miao._ConsoleOutputType.ERROR:
                prefix = f"{colorama.Fore.RED}{prefix}{colorama.Fore.RESET}"
            elif output_type is Miao._ConsoleOutputType.WARNING:
                prefix = f"{colorama.Fore.YELLOW}{prefix}{colorama.Fore.RESET}"
            else:
                prefix = f"{colorama.Fore.GREEN}{prefix}{colorama.Fore.RESET}"
        print(f"{prefix} {text}")

    def new(self, project_name: str):
        """
        Create a new project.
        """
        # Check if directory exists
        current_directory = os.getcwd()
        for file_name in os.listdir():
            if project_name == file_name:
                # raise RuntimeError("Already exists")
                self._print(
                    f"`{project_name}` already exists",
                    "error",
                    Miao._ConsoleOutputType.ERROR,
                )
                sys.exit(1)
        os.mkdir(project_name)
        self.project_name = project_name
        self._print(self.project_name, "Created")
        with open(
            f"{current_directory}/{self.project_name}/CMakeLists.txt", "w"
        ) as cmake_list:
            cmake_list.write(jinja2.Template(self.basic_template).render(project_name=self.project_name))
            self._print("CMakelists.txt", "Added")


if __name__ == "__main__":
    fire.Fire(Miao(True if sys.stdout.isatty() else False))
